#!/usr/bin/env bash

source $HOME/.cache/wal/colors.sh

red="#993333"
inverted=0

parse_wm_report() {
    buffer=""

    IFS=":"
    report=($1)
    unset ifs

    desktop=1
    monitor=0
    for i in "${!report[@]}"; do
        case "${report[$i]}" in
            [OF]*) # focused
                buffer="${buffer}${desktop} "
                desktop=$((desktop+1))
                ;;
            o*) # occupied
                buffer="${buffer}%{F${color3}}${desktop}%{F-} "
                desktop=$((desktop+1))
                ;;
            [Ff]*) # free
                buffer="${buffer}%{F${color8}}${desktop}%{F-} "
                desktop=$((desktop+1))
                ;;
            [Uu]*) # urgent
                buffer="${buffer}%{F${red}}${desktop}%{F-} "
                desktop=$((desktop+1))
                ;;
            [Mm]*) # monitor
                buffer="${buffer}%{S${monitor}} "
                monitor=$((monitor+1))
                ;;
        esac
    done
    buffer="${buffer}%{Sf}"

    echo "${buffer}"
}

get_music() {
    title=$(playerctl metadata title)
    artist=$(playerctl metadata artist)
    status=$(playerctl status)

    buffer="${title} — ${artist} %{T3}(${status,,}%{T-})"

    if [[ -n "${title}" ]]; then
        echo "${buffer}"
    fi
}

get_date() {
    date "+%b %-d %-I:%M"
}

get_battery() {
    BATC=/sys/class/power_supply/BAT1/capacity
    BATS=/sys/class/power_supply/BAT1/status

    status=$(sed -n p ${BATS})
    capacity=$(sed -n p ${BATC})

    if [[ $status != "Discharging"  ]]; then
        icons=("" "" "" "" "")
    else
        icons=("" "" "" "" "")
    fi

    buffer=""
    # Display secondary colour if low battery and not charging
    if [[ $status != "Charging" && $capacity -lt 15 ]]; then
        buffer="${buffer}%{F${color3}}"
    fi

    if [[ $capacity -lt 10 ]]; then
        buffer="${buffer} ${icons[0]}"
    elif [[ $capacity -lt 30 ]]; then
        buffer="${buffer} ${icons[1]}"
    elif [[ $capacity -lt 60 ]]; then
        buffer="${buffer} ${icons[2]}"
    elif [[ $capacity -lt 90 ]]; then
        buffer="${buffer} ${icons[3]}"
    else
        buffer="${buffer} ${icons[4]}"
    fi
    buffer="${buffer} ${capacity}%%{F-}"

    echo -e "${buffer}"
}

get_wifi() {
    iw=$(iw dev wlp2s0 link)
    ssid=$(echo "${iw}" | sed -n '/SSID/s/.*: //p')
    dbm=$(echo "${iw}" | sed -rn '/signal/s/.*: | dBm//pg')

    if [[ $dbm -lt -100 ]]; then
        quality=0
    elif [[ $dbm -gt -50 ]]; then
        quality=100
    else
        quality=$(( 2 * (dbm + 100) ))
    fi

    if [[ -z $ssid || $quality == 0 ]]; then
        echo "%{F${color3}}%{F-}"
    else
        if [[ $quality -lt 25 ]]; then
            buffer=""
        elif [[ $quality -lt 50 ]]; then
            buffer=""
        elif [[ $quality -lt 75 ]]; then
            buffer=""
        else
            buffer=""
        fi
        echo -e "${buffer} ${ssid}"
    fi
}

get_volume() {
    sink_info=$(pacmd list-sinks | sed -n "/index/{x;/\*/p;z;x};H;\${x;/\*/p}")

    # one of "internal", "speaker", "handset", "tv", "webcam", "microphone", "headset", "headphone", "hands-free", "car", "hifi", "computer", "portable"
    # http://0pointer.de/lennart/projects/pulseaudio/doxygen/proplist_8h.html
    type=$(echo "${sink_info}" | sed -rn "s/\s*device\.form_factor = \"(.*)\"/\1/pg")

    # yes | no
    muted=$(echo "${sink_info}" | sed -n "s/\s*muted: //p")

    # front-right volume
    volume=$(echo "${sink_info}" | sed -rn "/front-right/s/.*\/\s*([0-9]+)%.*/\1/p")

    if [[ "${type}" == "headphone" || "${type}" == "headset" ]]; then
        if [[ "${muted}" == "yes" ]]; then
            buffer="%{F${color3}}"
        else
            buffer=""
        fi
    else
        if [[ "${muted}" == "yes" ]]; then
            buffer="%{F${color3}}"
        elif [[ volume -lt 50 ]]; then
            buffer=""
        else
            buffer=""
        fi
    fi

    echo "${buffer} ${volume}%%{F-}"
}

get_org_clock () {
    org_clock_string=$(emacsclient -e "(if org-clock-current-task (string-trim (substring-no-properties (org-clock-get-clock-string))) \"\")" | sed 's/"//g')

    headline=$(echo "${org_clock_string}" | sed -r "s/.*\((.*)\).*/\1/")
    time=$(echo "${org_clock_string}" | sed -r "s/.*\[(.*)\].*/\1/")

    if [[ -n "${org_clock_string}" ]]; then
        echo "${headline} (${time})"
    fi
}

while read -r input; do
    case "${input}" in
    W*)
        wm_display=$(parse_wm_report "${input#?}")
        ;;
    N*)
        notification_display="${input#?}"
        ;;
    M*)
        music_display=$(get_music)
        ;;
    E*) # emacs signal
        org_display=$(get_org_clock)
        ;;
    C*) # clock signal
        date_display=$(get_date)
        battery_display=$(get_battery)
        wifi_display=$(get_wifi)
        volume_display=$(get_volume)
        ;;
    esac

    padding="   "
    buffer="${wm_display}"

    center=""
    if [[ -z "${notification_display}" ]] && [[ -n "${org_display}" ]] && [[ -n "${music_display}" ]]; then
        center="${music_display}${padding}—${padding}${org_display}"
    else
        center="${notification_display:-${org_display:-${music_display}}}"
    fi

    monitor_count=$(xrandr | grep -o "^.* connected" | wc -l)
    for (( i=0; i <$monitor_count; i++ )); do
        buffer="${buffer}%{S$i}%{c}${center}%{r}${date_display}  ${wifi_display}  ${volume_display} ${battery_display}"
    done

    # pad left and right of each monitor's bar
    buffer=$(echo "${buffer}" | sed -r "s/(^|%\{S.\})\s*|\s*$/\1${padding}/g")

    # flush colours for the transition from notification
    # to no notification
    if [[ -n "${notification_display}" ]]; then
        if ! ((inverted)); then
            echo "${buffer}%{F-}%{B-}%{R}"
            inverted=1
        fi
    else
        if ((inverted)); then
            echo "${buffer}%{B-}%{F-}"
            echo "${buffer}%{B-}%{F-}"
            inverted=0
        fi
    fi

    # output final buffer
    if ((inverted)); then
        buffer=$(echo "${buffer}" | \
                     sed -r "s/%\{F-\}/%\{R\}%\{<remove>B-\}%\{R\}/g" | \
                     sed -r "s/%\{B-\}/%\{R\}%\{<remove>F-\}%\{R\}/g" | \
                     sed -r "s/<remove>//g")
        echo "${buffer}"
    else
        echo "${buffer}%{B-}%{F-}"
    fi

done
